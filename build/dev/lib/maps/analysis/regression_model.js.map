{"version":3,"sources":["analysis/regression_model.js"],"names":["define","utils","$q","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qNullSuppression","qDef","qFieldDefs","meaLen","measures","length","rowsLabel","label","validateMeasure","params","meaList","dataType","i","mea","param","push","soglia","split","norm","cor","fo","displayDebugModeMessage","debugMode","saveRDataset","getDebugSaveDatasetScript","defMea1","displayRScriptsToConsole","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","qHyperCube","qMeasureInfo","qMatrix","qText","displayConnectionError","extId","displayReturnedDatasetToConsole","result","parse","estimate","stdError","tValue","pr","minPr","Math","max","apply","residuals","sigma","df","rSquared","adjRSquared","fstatistic","aic","html","$","resolve","promise"],"mappings":"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","file":"../../js/analysis/regression_model.js","sourcesContent":["define([\n  '../util/utils',\n  'ng!$q',\n], (utils, $q) => {\n  return {\n    /**\n     * createCube - create HyperCubes\n     *\n     * @param {Object} app    reference to app\n     * @param {Object} $scope angular $scope\n     *\n     * @return {Null} null\n     */\n    createCube(app, $scope) {\n      const layout = $scope.layout;\n\n      // Set definitions for dimensions and measures\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\n      const dimensions = [{\n        qNullSuppression: true,\n        qDef: {\n          qFieldDefs: [dimension]\n        },\n      }];\n\n      const meaLen = layout.props.measures.length;\n      $scope.rowsLabel = ['(Intercept)', (layout.props.measures[1].label != '') ? layout.props.measures[1].label : utils.validateMeasure(layout.props.measures[0]) ]; // Label for dimension values\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0, ${utils.validateMeasure(layout.props.measures[1])} as mea1`;\n      let meaList = 'q$mea0 ~ q$mea1';\n      let dataType = 'NN';\n\n      for (let i = 2; i < meaLen; i++) {\n        const mea = utils.validateMeasure(layout.props.measures[i]);\n        if (mea.length > 0) {\n          const param = `,${mea} as mea${i}`;\n          params += param;\n          meaList += ` + q$mea${i}`;\n          dataType += 'N';\n\n          $scope.rowsLabel.push(utils.validateMeasure(layout.props.measures[i]));\n        }\n      }\n\t  // Normalize data - Find Correlation - Split condition - set training data for fit model using most correlated features.\n\t  const soglia = 0.3;\n\t  const split = `q$mea0 > 0.0`;\n\t  const norm = `library(caret);target <- q$mea0; preParams <- preProcess(q[,1:${meaLen}], method=c(\"range\"));q <- predict(preParams, q[,1:${meaLen}]); q$mea0 <- target`;\n\t  const cor = `m = abs(cor(subset(q,q$mea0 != 0),q$mea0[q$mea0 != 0], method = \"pearson\"))`;\n\t  const fo = `f=\"\";for(j in 2:${meaLen}) if(!is.na(m[j]) && m[j]>=${soglia}){l=paste(\"q$mea\",j-1,sep=\"\"); f=paste(f,l,sep=\" + \")} ;f=paste(\"q$mea0 ~ \",substring(f,3));str(f)`;\n\t  \n      // Debug mode - set R dataset name to store the q data. \n      utils.displayDebugModeMessage(layout.props.debugMode);\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_regression_analysis.rda');\n\n      const defMea1 = `R.ScriptEvalExStr('${dataType}','${saveRDataset} library(jsonlite);${norm};${cor}; ${fo}; lm_result <- lm(as.formula(f), q, ${split});lm_summary <- summary(lm_result);\n      json <- toJSON(list(coef(lm_summary)[,\"Estimate\"], coef(lm_summary)[,\"Std. Error\"], coef(lm_summary)[,\"t value\"], coef(lm_summary)[,\"Pr(>|t|)\"],\n      as.double(summary(lm_result$residuals)), summary(lm_result)$sigma, summary(lm_result)$df, lm_summary$r.squared, lm_summary$adj.r.squared,\n      summary(lm_result)$fstatistic, extractAIC(lm_result)[2])); json;',${params})`;\n\n      // Debug mode - display R Scripts to console\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\n\n      const measures = [\n        {\n          qDef: {\n            qDef: defMea1,\n          },\n        },\n        {\n          qDef: {\n            qLabel: '-',\n            qDef: '', // Dummy\n          },\n        },\n        {\n          qDef: {\n            qLabel: '-',\n            qDef: '', // Dummy\n          },\n        },\n        {\n          qDef: {\n            qLabel: '-',\n            qDef: '', // Dummy\n          },\n        },\n        {\n          qDef: {\n            qLabel: '-',\n            qDef: '', // Dummy\n          },\n        },\n      ];\n\n      $scope.backendApi.applyPatches([\n        {\n          qPath: '/qHyperCubeDef/qDimensions',\n          qOp: 'replace',\n          qValue: JSON.stringify(dimensions),\n        },\n        {\n          qPath: '/qHyperCubeDef/qMeasures',\n          qOp: 'replace',\n          qValue: JSON.stringify(measures),\n        },\n      ], false);\n\n      $scope.patchApplied = true;\n      return null;\n    },\n    /**\n    * drawChart - draw chart with updated data\n    *\n    * @param {Object} $scope angular $scope\n    *\n    * @return {Object} Promise object\n    */\n    drawChart($scope) {\n      const defer = $q.defer();\n      const layout = $scope.layout;\n\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\n      const requestPage = [{\n        qTop: 0,\n        qLeft: 0,\n        qWidth: 2,\n        qHeight: 1,\n      }];\n\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\n\n        // Display error when all measures' grand total return NaN.\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\n          utils.displayConnectionError($scope.extId);\n        } else {\n          // Debug mode - display returned dataset to console\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\n\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\n\n          const estimate = result[0];\n          const stdError = result[1];\n          const tValue = result[2];\n          const pr = result[3];\n          const minPr = Math.max.apply(null, pr);\n\n          const residuals = result[4];\n\n          const sigma = result[5];\n          const df = result[6];\n\n          const rSquared = result[7];\n          const adjRSquared = result[8];\n\n          const fstatistic = result[9];\n          const aic = result[10];\n\n          // Set table header\n          let html = `\n            <h2>Residuals:</h2>\n            <table class=\"simple\">\n              <thead>\n                <tr>\n                  <th>Min</th><th>1Q</th><th>Median</th><th>3Q</th><th>Max</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>${residuals[0]}</td><td>${residuals[1]}</td><td>${residuals[2]}</td><td>${residuals[4]}</td><td>${residuals[5]}</td>\n                </tr>\n             </tbody>\n            </table>\n\n            <h2>Coefficients:</h2>\n            <table class=\"simple\">\n              <thead>\n                <tr>\n                  <th></th><th>Estimate</th><th>Std.Error</th><th>t value</th><th>Pr(>|t|)</th><th>Signif</th>\n                </tr>\n              </thead>\n              <tbody>\n          `;\n\n          // Set regression analysis results to table\n          for (let i = 0; i < $scope.rowsLabel.length; i++) {\n            html += `<tr><td>${$scope.rowsLabel[i]}</td><td>${estimate[i]}</td><td>${stdError[i]}</td><td>${tValue[i]}</td><td>${pr[i]}</td>\n                      <td>${(pr[i] < 0.001) ? '<span class=\"lui-icon  lui-icon--star\"></span><span class=\"lui-icon  lui-icon--star\"></span><span class=\"lui-icon  lui-icon--star\"></span>' : (pr[i] < 0.01) ? '<span class=\"lui-icon  lui-icon--star\"></span><span class=\"lui-icon  lui-icon--star\"></span>' : (pr[i] < 0.05) ? '<span class=\"lui-icon  lui-icon--star\"></span>' : (pr[i] < 0.1) ? '.' : ''}</td>\n                    </tr>`;\n          }\n\n          // Set table footer and other results\n          html += `\n              </tbody>\n            </table>\n            <div>Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1</div>\n\n            <h2>Others:</h2>\n            <table class=\"simple\">\n              <thead>\n                <tr>\n                  <th>Item</th><th>Value</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr><td>Residual standard error</td><td>${sigma[0]} on ${df[1]} degrees of freedom</td></tr>\n                <tr><td>Multiple R-squared</td><td>${rSquared[0]}</td></tr>\n                <tr><td>Adjusted R-squared</td><td>${adjRSquared[0]}</td></tr>\n                <tr><td>F-statistic</td><td> ${fstatistic[0]} on ${fstatistic[1]} and ${fstatistic[2]} DF,  p-value: < ${minPr}</td></tr>\n                <tr><td>AIC</td><td>${aic[0]}</td></tr>\n             </tbody>\n            </table>\n          `;\n\n          // Set HTML element for chart\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(html);\n        }\n        return defer.resolve();\n      });\n      return defer.promise;\n    },\n  };\n});\n"]}