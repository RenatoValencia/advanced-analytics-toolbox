{"version":3,"sources":["analysis/regression_predict_table.js"],"names":["define","lineChart","utils","$q","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qNullSuppression","qDef","qFieldDefs","qSortCriterias","qSortByExpression","dimSort","dimSortByExpression","dimSortByExpressionAsc","qSortByNumeric","dimSortByNum","dimSortByNumAsc","qSortByAscii","dimSortByAlph","dimSortByAlphAsc","qExpression","qv","dimSortByExpressionString","meaLen","measures","length","rowsLabel","validateMeasure","params","meaList","i","mea","param","push","soglia","norm","cor","fo","split","s","displayDebugModeMessage","debugMode","saveRDataset","getDebugSaveDatasetScript","defMea1","interval","confidenceLevel","defMea2","defMea3","displayRScriptsToConsole","measure","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","measureInfo","qHyperCube","qMeasureInfo","isNaN","qMin","qMax","displayConnectionError","extId","displayReturnedDatasetToConsole","elemNum","getDefaultPaletteColor","dim1","mea1","mea2","mea3","mea4","$","each","qMatrix","key","value","qElemNumber","qNum","qText","html","Math","ceil","resolve","promise"],"mappings":"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","file":"../../js/analysis/regression_predict_table.js","sourcesContent":["define([\n  '../chart/line_chart',\n  '../util/utils',\n  'ng!$q',\n], (lineChart, utils, $q) => {\n  return {\n    /**\n     * createCube - create HyperCubes\n     *\n     * @param {Object} app    reference to app\n     * @param {Object} $scope angular $scope\n     *\n     * @return {Null} null\n     */\n    createCube(app, $scope) {\n      const layout = $scope.layout;\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\n      const dimensions = [\n        {\n          qNullSuppression: true,\n          qDef: {\n            qFieldDefs: [dimension],\n            qSortCriterias: [{\n              qSortByExpression: layout.props.dimSort || !layout.props.dimSortByExpression ? 0 : layout.props.dimSortByExpressionAsc,\n              qSortByNumeric: (layout.props.dimSort) ? 1 : (!layout.props.dimSortByNum) ? 0 : layout.props.dimSortByNumAsc,\n              qSortByAscii: layout.props.dimSort || !layout.props.dimSortByAlph ? 0 : layout.props.dimSortByAlphAsc,\n              qExpression: {\n                qv: layout.props.dimSortByExpressionString,\n              },\n            }],\n          },\n        },\n      ];\n\n      const meaLen = layout.props.measures.length;\n      $scope.rowsLabel = ['(Intercept)', utils.validateMeasure(layout.props.measures[1])]; // Label for dimension values\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0, ${utils.validateMeasure(layout.props.measures[1])} as mea1`;\n      let meaList = 'q$mea0 ~ q$mea1';\n\n      for (let i = 2; i < meaLen; i++) {\n        const mea = utils.validateMeasure(layout.props.measures[i]);\n        if (mea.length > 0) {\n          const param = `,${mea} as mea${i}`;\n          params += param;\n          meaList += ` + q$mea${i}`;\n\n          $scope.rowsLabel.push(utils.validateMeasure(layout.props.measures[i]));\n        } \n      }\n\t  \n\t  // Normalize data - Find Correlation - Split condition - set training data for fit model and predict only NA values, using most correlated features.  \n\t  const soglia = 0.3;\n\t  const norm = `library(caret);target <- q$mea0; preParams <- preProcess(q[,1:${meaLen}], method=c(\"range\"));q <- predict(preParams, q[,1:${meaLen}]); q$mea0 <- target`;\n\t  const cor = `m = abs(cor(subset(q,q$mea0 != 0),q$mea0[q$mea0 != 0], method = \"pearson\"))`;\n\t  const fo = `f=\"\";for(j in 2:${meaLen}) if(!is.na(m[j]) && m[j]>=${soglia}){l=paste(\"q$mea\",j-1,sep=\"\"); f=paste(f,l,sep=\" + \")} ;f=paste(\"q$mea0 ~ \",substring(f,3));str(f)`;  \n\t  const split = `q$mea0 > 0`;\t\n\t  const s = `q = subset(q,q$mea0 == 0); q$mea0[q$mea0 == 0] <- NA;`;\n\t  \n      // Debug mode - set R dataset name to store the q data.\n      utils.displayDebugModeMessage(layout.props.debugMode);\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_regression_analysis_line_chart.rda');\n\t\t  \n      const defMea1 = `R.ScriptEval('${saveRDataset} ${norm}; if(sum(q$mea0)> 0 && min(q$mea0) == 0){${cor}; ${fo}; lm_result <- lm(as.formula(f), q, ${split});${s} predict(lm_result, q, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel});} else{lm_result <- lm(${meaList});predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel}); }[,1]',${params})`;\n      const defMea2 = `R.ScriptEval('${norm}; if(sum(q$mea0)> 0 && min(q$mea0) == 0){${cor}; ${fo}; lm_result <- lm(as.formula(f), q, ${split});${s} predict(lm_result, q, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel});} else{lm_result <- lm(${meaList});predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel}); }[,2]',${params})`;\n      const defMea3 = `R.ScriptEval('${norm}; if(sum(q$mea0)> 0 && min(q$mea0) == 0){${cor}; ${fo}; lm_result <- lm(as.formula(f), q, ${split});${s} predict(lm_result, q, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel});} else{lm_result <- lm(${meaList});predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel}); }[,3]',${params})`;\n\n      // Debug mode - display R Scripts to console\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1, defMea2, defMea3]);\n\n      const measure = utils.validateMeasure(layout.props.measures[0]);\n      const measures = [\n        {\n          qDef: {\n            qDef: measure,\n          },\n        },\n        {\n          qDef: {\n            qDef: defMea1,\n          },\n        },\n        {\n          qDef: {\n            qDef: defMea2,\n          },\n        },\n        {\n          qDef: {\n            qDef: defMea3,\n          },\n        },\n        {\n          qDef: {\n            qLabel: '-',\n            qDef: '', // Dummy\n          },\n        },\n      ];\n\n      $scope.backendApi.applyPatches([\n        {\n          qPath: '/qHyperCubeDef/qDimensions',\n          qOp: 'replace',\n          qValue: JSON.stringify(dimensions),\n        },\n        {\n          qPath: '/qHyperCubeDef/qMeasures',\n          qOp: 'replace',\n          qValue: JSON.stringify(measures),\n        },\n      ], false);\n\n      $scope.patchApplied = true;\n      return null;\n    },\n    /**\n    * drawChart - draw chart with updated data\n    *\n    * @param {Object} $scope angular $scope\n    *\n    * @return {Object} Promise object\n    */\n    drawChart($scope, app) {\n      const defer = $q.defer();\n      const layout = $scope.layout;\n\n      const requestPage = [{\n        qTop: 0,\n        qLeft: 0,\n        qWidth: 6,\n        qHeight: 1500,\n      }];\n\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\n\n        // Display error when all measures' grand total return NaN.\n        if (isNaN(measureInfo[1].qMin) && isNaN(measureInfo[1].qMax)\n          && isNaN(measureInfo[2].qMin) && isNaN(measureInfo[2].qMax)\n          && isNaN(measureInfo[3].qMin) && isNaN(measureInfo[3].qMax)\n        ) {\n          utils.displayConnectionError($scope.extId);\n        } else {\n          // Debug mode - display returned dataset to console\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\n\t    \n          const palette = utils.getDefaultPaletteColor();\n          const elemNum = [];\n          const dim1 = []; // Dimension\n          const mea1 = [];\n          const mea2 = [];\n          const mea3 = [];\n          const mea4 = [];\n\t\t  \n\t\t  \n          $.each(dataPages[0].qMatrix, (key, value) => {  \n            elemNum.push(value[0].qElemNumber);\n\t\t    if(value[1].qNum == 0)  \n            dim1.push(value[0].qText);\t\t\n            mea1.push(value[1].qNum);\n            mea2.push(value[2].qNum);\n            mea3.push(value[3].qNum);\n            mea4.push(value[4].qNum);\n\t\t  });\n\n\t\t  \n          // Set table header\n          let html = `\n            <h2>Predicted:</h2>\n            <table class=\"simple\">\n              <thead>\n                <tr>\n                  <th>Code</th><th>Remaining Life</th>\n                </tr>\n              </thead>\n              <tbody>\n          `;\n\t\t  \n\t\t  // Set regression analysis results to table\n          for (let i = 0; i < dim1.length; i++) {\n            html += `<tr><td>${dim1[i]}</td><td>${Math.ceil(mea2[i])}</td>\n                    </tr>`;\n          }\n\n          // Set table footer and other results\n          html += `\n              </tbody>\n            </table>\n\t\t   `;\n\t\t  \n\t \t  // Set HTML element for chart\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(html); \n\t\t  \n        }\n        return defer.resolve();\n      });\n      return defer.promise;\n    },\n  };\n});\n"]}